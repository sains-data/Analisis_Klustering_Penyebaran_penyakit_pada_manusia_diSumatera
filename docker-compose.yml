# Docker Compose untuk Sistem Big Data Prediksi Diabetes


services:
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    environment:
      - CLUSTER_NAME=hadoop-cluster
    ports:
      - "9870:9870"
      - "8020:8020" # Expose HDFS port
    volumes:
      - hdfs_namenode:/hadoop/dfs/name
      - ./data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870"]
      interval: 1m
      timeout: 20s
      retries: 10
      start_period: 2m
    networks:
      - hadoop-net

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    hostname: datanode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - SERVICE_PRECONDITION=namenode:9870
    ports:
      - "9864:9864"
    volumes:
      - hdfs_datanode:/hadoop/dfs/data
      - ./data:/data
    depends_on:
      namenode:
        condition: service_healthy
    networks:
      - hadoop-net

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    ports:
      - "8088:8088"
      - "8031:8031"  # Expose ResourceManager port
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - YARN_CONF_yarn_resourcemanager_hostname=resourcemanager
      - YARN_CONF_yarn_resourcemanager_address=resourcemanager:8032
      - YARN_CONF_yarn_resourcemanager_scheduler_address=resourcemanager:8030
      - YARN_CONF_yarn_resourcemanager_resource__tracker_address=resourcemanager:8031
      - YARN_CONF_yarn_timeline___service_enabled=true
    depends_on:
      - namenode
    networks:
      - hadoop-net

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - YARN_CONF_yarn_resourcemanager_hostname=resourcemanager
      - YARN_CONF_yarn_nodemanager_pmem___check___enabled=false
      - YARN_CONF_yarn_nodemanager_vmem___check___enabled=false
      - YARN_CONF_yarn_nodemanager_resource_memory___mb=8192
      - YARN_CONF_yarn_nodemanager_resource_cpu___vcores=4
    depends_on:
      - resourcemanager
    networks:
      - hadoop-net
      
  postgres-metastore:
    image: postgres:12.3
    container_name: postgres-metastore
    hostname: postgres-metastore
    environment:

      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=hive
      - POSTGRES_USER=hive
      - POSTGRES_PASSWORD=hive

    
    volumes:
      - postgres-metastore-data:/var/lib/postgresql/data
    networks:
      - hadoop-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "hive"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"
      - "8081:8080"  # Spark Master UI (host:container)
    volumes:
      - ./scripts:/scripts
    networks:
      - hadoop-net

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    ports:
      - "8082:8081"  # Spark Worker UI (host:container)
    volumes:
      - ./scripts:/scripts
    networks:
      - hadoop-net
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    hostname: hive-server
    environment:
      - HIVE_METASTORE_DB_TYPE=postgresql
      - HIVE_METASTORE_DB_HOST=postgres-metastore
      - HIVE_METASTORE_DB_PORT=5432
      - HIVE_METASTORE_DB_NAME=hive
      - HIVE_METASTORE_DB_USER=hive
      - HIVE_METASTORE_DB_PASSWORD=hive
    ports:
      - "10000:10000"  # HiveServer2 port (host:container)
    depends_on:
      - hive-metastore
    networks:
      - hadoop-net
    volumes:
      - ./postgresql-42.2.5.jar:/opt/hive/lib/postgresql-42.2.5.jar
    healthcheck:
      test: ["CMD", "hive", "-e", "SHOW DATABASES"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    hostname: hive-metastore
    environment:
      - HIVE_METASTORE_DB_TYPE=postgresql
      - HIVE_METASTORE_DB_HOST=postgres-metastore
      - HIVE_METASTORE_DB_PORT=5432
      - HIVE_METASTORE_DB_NAME=hive
      - HIVE_METASTORE_DB_USER=hive
      - HIVE_METASTORE_DB_PASSWORD=hive
    depends_on:
      - postgres-metastore
    networks:
      - hadoop-net
    volumes:
      - ./postgresql-42.2.5.jar:/opt/hive/lib/postgresql-42.2.5.jar
    healthcheck:
      test: ["CMD", "hive", "-e", "SHOW DATABASES"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  superset:
    image: apache/superset
    container_name: superset
    ports:
      - "8083:8088"  # Superset UI (host:container)
    depends_on:
      - hive-server
    environment:
      - SUPERSET_SECRET_KEY=323213231rfacfq3rqcfR3R12W
      - SUPERSET_ENV=production
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin
      - ADMIN_EMAIL=admin@example.com
    volumes:
      - superset_home:/app/superset_home
    networks:
      - hadoop-net
    restart: unless-stopped

  airflow-postgres:
    image: postgres:12
    container_name: airflow-postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - airflow-db-volume:/var/lib/postgresql/data
    networks:
      - hadoop-net

  airflow:
    image: puckel/docker-airflow:1.10.9
    container_name: airflow
    restart: unless-stopped
    ports:
      - "8089:8080"  # Airflow UI (host:container)
    environment:
      - LOAD_EX=y
      - POSTGRES_HOST=airflow-postgres
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./logs:/usr/local/airflow/logs
      - ./data:/data
    depends_on:
      - airflow-postgres
      - spark-master
      - hive-server
      - superset
      
    networks:
      - hadoop-net

volumes:
  hdfs_namenode:
  hdfs_datanode:
  superset_home:
  postgres-metastore-data:
  airflow-db-volume:

networks:
  hadoop-net:

